{"mode":"Text","hardwareTarget":"brain","textContent":"# region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vr import *\n\n# Brain should be defined by default\nbrain = Brain()\n\ndrivetrain = Drivetrain(\"drivetrain\", 0)\npen = Pen(\"pen\", 8)\npen.set_pen_width(THIN)\nleft_bumper = Bumper(\"leftBumper\", 2)\nright_bumper = Bumper(\"rightBumper\", 3)\nfront_eye = EyeSensor(\"frontEye\", 4)\ndown_eye = EyeSensor(\"downEye\", 5)\nfront_distance = Distance(\"frontdistance\", 6)\ndistance = front_distance\nmagnet = Electromagnet(\"magnet\", 7)\nlocation = Location(\"location\", 9)\n\n# endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n#\n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode VR Python Project\n#\n# ------------------------------------------\n\n# one step is under 312\n\n\n# Add project code in \"main\"\n\n\n\n\ndef main():\n    # If you can turn left then turn left\n    # Else if you can continue driving straight then drive straight\n    # Else if you can turn right then turn right\n    # If you are at a dead end then turn around\n    # https://patrickmccabemakes.com/tutorials/Maze_Solving\n\n\n    \n    # Queue for steps, contains Nodes\n    maze_queue = []\n\n    # Make robot quicker\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n\n\n    # While not at the end of the maze\n    while not down_eye.detect(RED) or down_eye.detect(BLACK):\n\n        # Start drawing\n        pen.set_pen_color_rgb(30, 144, 255, 100)\n        pen.move(DOWN)\n\n        brain.print(front_distance.get_distance(MM))\n        brain.new_line()\n\n        drivetrain.turn_for(LEFT, 90, DEGREES)\n        maze_queue.append(\"LEFT\")\n\n        # Start a while loop to turn around to an open path\n        while True:\n            # If there is no object infront turn right\n            if front_distance.get_distance(MM) < 65:\n\n                drivetrain.turn_for(RIGHT, 90, DEGREES)\n                maze_queue.append(\"RIGHT\")\n            # If not end the while loop\n            else:\n                break\n        # Drive forward\n\n        drivetrain.drive_for(FORWARD, 250, MM)\n        maze_queue.append(\"FORWARD\")\n\n    step_count = len(maze_queue)\n    while not down_eye.detect(GREEN):\n        step = maze_queue[step_count-1]\n        if step == \"FORWARD\":\n            drivetrain.drive_for(REVERSE,250,MM)\n        elif step == \"LEFT\":\n            drivetrain.turn_for(RIGHT,90,DEGREES)\n        elif step == \"RIGHT\":\n            drivetrain.turn_for(LEFT,90,DEGREES)\n        else:\n            break\n        step_count-=1\n\n\n    brain.print(maze_queue)\n# VR threads â€” Do not delete\nvr_thread(main)\n","textLanguage":"python","robotConfig":[],"slot":0,"platform":"PG","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false,"playground":"DynamicWallMaze","robotModel":"vr"}