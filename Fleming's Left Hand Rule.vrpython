{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vr import *\n\n# Brain should be defined by default\nbrain=Brain()\n\ndrivetrain = Drivetrain(\"drivetrain\", 0)\npen = Pen(\"pen\", 8)\npen.set_pen_width(THIN)\nleft_bumper = Bumper(\"leftBumper\", 2)\nright_bumper = Bumper(\"rightBumper\", 3)\nfront_eye = EyeSensor(\"frontEye\", 4)\ndown_eye = EyeSensor(\"downEye\", 5)\nfront_distance = Distance(\"frontdistance\", 6)\ndistance = front_distance\nmagnet = Electromagnet(\"magnet\", 7)\nlocation = Location(\"location\", 9)\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode VR Python Project\n# \n# ------------------------------------------\n\ndef turn_left():\n    drivetrain.turn_for(LEFT,90,DEGREES)\n    wait(1,SECONDS)\n\ndef turn_right():\n    drivetrain.turn_for(RIGHT,90,DEGREES)\n    wait(1,SECONDS)\n\ndef move():\n    drivetrain.drive_for(FORWARD,250,MM)\n    wait(1,SECONDS)\n\n\n\n# Add project code in \"main\"\ndef main():\n    # If you can turn left then turn left\n    # Else if you can continue driving straight then drive straight\n    # Else if you can turn right then turn right\n    # If you are at a dead end then turn around\n    # https://patrickmccabemakes.com/tutorials/Maze_Solving\n    \n    count = 1\n    while True:   \n        count += 1 \n        brain.print(count)\n        brain.new_line()  \n        if front_distance.get_distance(MM) > 63 and front_distance.get_distance(MM) < 2800:\n            brain.print(\"can move forward\")\n            brain.new_line()   \n            turn_left()\n            if front_distance.get_distance(MM) > 63 and front_distance.get_distance(MM) < 2800:\n                brain.print(\"can move left\")\n                brain.new_line()  \n                move()\n            else:\n                brain.print(\"moving back and forward\")\n                brain.new_line()  \n                turn_right()\n                move()\n        else:\n            brain.print(\"blocked wall\")\n            brain.new_line()\n            turn_left()\n            if front_distance.get_distance(MM) > 63 and front_distance.get_distance(MM) < 2800:\n                brain.print(\"can move forward\")\n                brain.new_line()   \n                turn_left()\n\n            \n\n\n\n        \n        \n\n# VR threads â€” Do not delete\nvr_thread(main)\n","textLanguage":"python","robotConfig":[],"slot":0,"platform":"PG","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false,"playground":"DynamicWallMaze","robotModel":"vr"}